#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
password=$YNH_APP_ARG_PASSWORD

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

ynh_script_progression --message="Validating installation parameters..." --weight=1

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "Seems like $final_path already exist. Aborting."

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Check web path availability
ynh_webpath_available $domain $path_url
# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app is_public $is_public

#=================================================
# FIND AND OPEN A PORT
#=================================================

# Find a free port
port=$(ynh_find_port 8080)
# Open this port
yunohost firewall allow --no-upnp TCP $port 2>&1
ynh_app_setting_set $app port $port

#==============================================
# INSTALL DEPS
#==============================================

## Install PHP 7.2
ynh_install_php --phpversion=7.2

## Get apt updates
ynh_package_update
ynh_package_install libargon2-1 libsodium23 libzip5 memcached php-igbinary php-memcached php-msgpack php-xdebug php7.2 php7.2-bcmath php7.2-cli php7.2-common php7.2-curl php7.2-fpm php7.2-gd php7.2-json php7.2-mbstring php7.2-mysql php7.2-opcache php7.2-readline php7.2-xml php7.2-zip


## Start php7.2
systemctl enable php7.2-fpm
systemctl start php7.2-fpm

#=================================================
# CREATE A MYSQL DATABASE
#=================================================
# If your app uses a MySQL database, you can use these lines to bootstrap
# a database, an associated user and save the password in app settings

db_name=$(ynh_sanitize_dbid $app)
ynh_app_setting_set $app db_name $db_name
ynh_mysql_setup_db $db_name $db_name

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create $app

#=================================================
# SPECIFIC SETUP
#=================================================

# create a user
email=$(ynh_user_get_info $admin 'mail')

# setup application config
cp -a ../conf/.env $final_path/.env
cp -a ../conf/wings.service /etc/systemd/system/wings.service

#=================================================
# MODIFY A CONFIG FILE
#=================================================

#ynh_replace_string "random_key" "$random_key" "$final_path/.env"
ynh_replace_string "__DB_USER__"   "$db_name"    "$final_path/.env"
ynh_replace_string "__DB_PASS__"   "$db_pwd"     "$final_path/.env"
ynh_replace_string "__DB_NAME__"   "$db_name"    "$final_path/.env"
#ynh_replace_string "yunomail"   "$email"      "$final_path/.env"
#ynh_replace_string "yunodomain" "$domain"     "$final_path/.env"

#==============================================
# INSTALL Composer
#==============================================

ynh_install_composer

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#==============================================
# Install Pterodactyl
#==============================================

pushd $final_path
chmod -R 755 storage/* bootstrap/cache
composer install --no-progress
php artisan key:generate --force
php artisan migrate --force
php artisan db:seed --force
php artisan p:user:make --name-first $admin --name-last $admin --username $admin --email $email --password $password --admin 1
php artisan p:environment:setup --author=$email --url=https://$domain --timezone=America/New_York --cache=redis --session=database --queue=redis --disable-settings-ui --redis-host=127.0.0.1 --redis-pass= --redis-port=6379
php artisan migrate --seed --force
popd

#==============================================
# Install Docker
#==============================================

ynh_package_install apt-transport-https ca-certificates curl gnupg2 software-properties-common zip unzip tar make gcc g++ python curl gnupg
curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
ynh_package_update
ynh_package_install docker-ce
cp -a ../conf/daemon.json /etc/docker/daemon.json
systemctl enable docker
systemctl start docker

#==============================================
# Install Daemon
#==============================================

mkdir -p /srv/daemon /srv/daemon-data
pushd /srv/daemon

ynh_install_nodejs --nodejs_version=10

ynh_package_install make gcc g++

ynh_setup_source --dest_dir=/srv/daemon --source_id=daemon.src
npm install --only=production

#C'est bien dit dans la doc, ne surtout pas utiliser npm audit fix -_-
#npm audit fix
# Ne pas le démarrer ! La config est pas faite et si jamais on le démarre il sera en double avec le systemd.
#sudo npm start

popd

#=================================================
# SETUP SYSTEMD
#=================================================

ynh_add_systemd_config
systemctl enable $app.service
systemctl enable wings.service

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

mkdir -p /var/log/pterodactyl/
touch /var/log/$app/$app-prod.log
yunohost service add $app --log "/var/log/$app/$app-prod.log"
yunohost service add wings

#==============================================
# Cron
#==============================================

crontab -l | { cat; echo "* * * * * php $final_path/artisan schedule:run" ; } | crontab -

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R www-data:www-data $final_path

#=================================================
# SETUP SSOWAT
#=================================================

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set $app unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx
