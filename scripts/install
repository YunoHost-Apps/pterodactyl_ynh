#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
password=$YNH_APP_ARG_PASSWORD
email=$(ynh_user_get_info --username=$admin --key=mail)

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --time --weight=1

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=admin --value=$admin

#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding an available port..." --weight=1

# Find an available port
port=$(ynh_find_port --port=8080)
ynh_app_setting_set --app=$app --key=port --value=$port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --weight=1

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE A MYSQL DATABASE
#=================================================
ynh_script_progression --message="Creating a MySQL database..." --weight=1

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_mysql_setup_db --db_user=$db_user --db_name=$db_name

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=1

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --time --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --time --weight=1

# Create a system user
ynh_system_user_create --username=$app

#=================================================
# SPECIFIC SETUP
#=================================================

# setup application config
cp -a ../conf/.env $final_path/.env

cp -a ../conf/wings.service /etc/systemd/system/wings.service

#=================================================
# MODIFY A CONFIG FILE
#=================================================

#ynh_replace_string "random_key" "$random_key" "$final_path/.env"
ynh_replace_string "__DB_USER__"   "$db_name"    "$final_path/.env"
ynh_replace_string "__DB_PWD_"   "$db_pwd"     "$final_path/.env"
ynh_replace_string "__DB_NAME__"   "$db_name"    "$final_path/.env"
#ynh_replace_string "yunomail"   "$email"      "$final_path/.env"
#ynh_replace_string "yunodomain" "$domain"     "$final_path/.env"

#==============================================
# INSTALL Composer
#==============================================

ynh_install_composer

#==============================================
# Install Pterodactyl
#==============================================

pushd $final_path
	chmod -R 755 storage/* bootstrap/cache
	composer install --no-progress
	php artisan key:generate --force
	php artisan migrate --force
	php artisan db:seed --force
	php artisan p:user:make --name-first $admin --name-last $admin --username $admin --email $email --password $password --admin 1
	php artisan p:environment:setup --author=$email --url=https://$domain --timezone=America/New_York --cache=redis --session=database --queue=redis --disable-settings-ui --redis-host=127.0.0.1 --redis-pass= --redis-port=6379
	php artisan migrate --seed --force
popd

#==============================================
# Install Docker
#==============================================

ynh_package_install apt-transport-https ca-certificates curl gnupg2 software-properties-common zip unzip tar make gcc g++ python curl gnupg
curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
ynh_package_update
ynh_package_install docker-ce
cp -a ../conf/daemon.json /etc/docker/daemon.json
systemctl enable docker
systemctl start docker

#==============================================
# Install Daemon
#==============================================

mkdir -p /srv/daemon /srv/daemon-data
pushd /srv/daemon

ynh_install_nodejs --nodejs_version=10

ynh_package_install make gcc g++

ynh_setup_source --dest_dir=/srv/daemon --source_id=daemon.src
npm install --only=production

#C'est bien dit dans la doc, ne surtout pas utiliser npm audit fix -_-
#npm audit fix
# Ne pas le démarrer ! La config est pas faite et si jamais on le démarre il sera en double avec le systemd.
#sudo npm start

popd

#=================================================
# SETUP SYSTEMD
#=================================================

ynh_add_systemd_config
systemctl enable $app.service
systemctl enable wings.service

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

mkdir -p /var/log/pterodactyl/
touch /var/log/$app/$app-prod.log
yunohost service add $app --log "/var/log/$app/$app-prod.log"
yunohost service add wings

#==============================================
# Cron
#==============================================

crontab -l | { cat; echo "* * * * * php $final_path/artisan schedule:run" ; } | crontab -

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R www-data:www-data $final_path

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring permissions..." --time --weight=1

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# Everyone can access the app.
	# The "main" permission is automatically created before the install script.
	ynh_permission_update --permission="main" --add="visitors"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --time --last
